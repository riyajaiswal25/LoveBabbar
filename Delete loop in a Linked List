Using HashSet:

class Solution
{
    //Function to remove a loop in the linked list.
    public static void removeLoop(Node head){
        // code here
        // remove the loop without losing any nodes
        
        HashSet<Node> set=new HashSet<Node>();
        Node temp=head;
        while(temp.next!=null)
        {
            if(set.contains(temp.next))
            {
                temp.next=null;
                break;
            }
            set.add(temp);
            temp=temp.next;
        }
        
    }
}

Using HashMap:

class Solution
{
    //Function to remove a loop in the linked list.
    public static void removeLoop(Node head){
        // code here
        // remove the loop without losing any nodes
        
        HashMap<Node, Integer> map=new HashMap<>();
        Node temp=head;
        while(temp.next!=null)
        {
            if(map.containsKey(temp.next))
            {
                temp.next=null;
                break;
            }
            else
            map.put(temp,0);
            temp=temp.next;
        }
        
    }
}

Using slow and fast pointers:

class Solution
{
    //Function to remove a loop in the linked list.
    public static void removeLoop(Node head){
        // code here
        // remove the loop without losing any nodes
        
        Node slow=head;
        Node fast=head;
        
        while(slow!=null && fast!=null && fast.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast)
            break;
        }
        if(slow==head)
        {
            while(fast.next!=slow)
            {
            fast=fast.next;
            }
            fast.next=null;
        }
        else if(slow==fast)
        {
            slow=head;
            while(slow.next != fast.next)
            {
                slow=slow.next;
                fast=fast.next;
            }
            fast.next=null;
        }
    }
}
